@using System.Text.RegularExpressions
@model ProductListViewModel

<div class="container mt-5">

    <h2 class="text-center mb-4">Characters</h2>



    @await Html.PartialAsync("_ProductSearchItems", Model.Search)

    <div class="alert alert-primary mt-2">
        Quantity of products: <strong>@Model.Count</strong>
    </div>

    @if (Model.Count == 0)
    {
        <div class="border rounded p-3 text-muted text-center bg-light">
            <i class="bi bi-search me-2" />
            No products found.
        </div>
    }
    else
    {
        
    }

@*     @await Html.PartialAsync("_ListProductItems", Model.Products) *@

    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var item in Model.Products.GetRange(
            (Model.Search.PageSize * Model.Search.Page)-Model.Search.PageSize,
            ((Model.Search.PageSize * Model.Search.Page) < Model.Count) ?
                Model.Search.PageSize :
                Model.Search.PageSize - ((Model.Search.PageSize * Model.Search.Page)-Model.Count)))
        {
            string image = item.Images[0];
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <img src="/Images/400_@image" class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">
                            @Html.Raw(
                                     item.Description != null
                                     ? Regex.Replace(item.Description, "<.*?>", "").Substring(0, Math.Min(50, Regex.Replace(item.Description, "<.*?>", "").Length)) + "..."
                                     : ""
                                     )
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="mt-5 flex" style="max-width:70%">
        <ul class="pagination">
            @for (var i = 1; i <= Model.Search.TotalPages; i++)
            {
                <li class="page-item @(i == Model.Search.Page ? "active" : "")">
                    <a href="@Url.Action("Index", new {
                        page = i,
                        pageSize = Model.Search.PageSize,
                        Name = Model.Search.Name,
                        Description = Model.Search.Description,
                        CategoryId = Model.Search.CategoryId
                    })" class="page-link">@i</a>
                </li>
            }
        </ul>
        <form method="get" id="pageSizeForm" class="flex">
            <input type="hidden" name="page" value="1" />
            <input type="hidden" name="Name" value="@Model.Search.Name" />
            <input type="hidden" name="Description" value="@Model.Search.Description" />
            <input type="hidden" name="CategoryId" value="@Model.Search.CategoryId" />

            <label>Items per page:</label>
            <select name="pageSize" class="form-select" style="width: auto; display: inline;" onchange="this.form.submit()">
                @foreach (var size in new[] { 5, 10, 20, 50 })
                {
                    <option value="@size" selected="@(Model.Search.PageSize == size ? "selected" : null)">@size</option>
                }
            </select>
        </form>
    </div>

<script>
</script>